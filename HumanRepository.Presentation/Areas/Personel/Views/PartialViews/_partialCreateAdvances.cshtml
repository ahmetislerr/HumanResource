@model CreateAdvanceDTO

<div class="modal fade" id="createAdvanceModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-l">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">New message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="create" asp-controller="advance">
                    <div class="row d-flex justify-content-center mt-3">

                        <div class="col-lg-10">
                            <div class="form-group">
                                <label asp-for="Amount" class="form-label">Amount</label>
                                <input asp-for="Amount" id="id" class="form-control" pattern="\d*" type="text" placeholder="Amount">
                                <span asp-validation-for="Amount"></span>
                            </div>

                            <div class="form-group">
                                <label asp-for="NumberOfInstallments" class="form-label">Number Of Installments</label>
                                <input asp-for="NumberOfInstallments" class="form-control" type="number">
                                <span asp-validation-for="NumberOfInstallments"></span>
                            </div>

                        </div>
                    </div>

                    <div class="form-group d-flex justify-content-end mt-3">
                        <input type="submit" value="Create" class="btn btn-primary" />
                        <div class="col-lg-1"></div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        function myFunction(id) {
            Number.prototype.formatMoney = function (c, d, t) {
                var n = this,
                    c = isNaN(c = Math.abs(c)) ? 2 : c,
                    d = d == undefined ? "." : d,
                    t = t == undefined ? "," : t,
                    s = n < 0 ? "-" : "",
                    i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
                    j = (j = i.length) > 3 ? j % 3 : 0;
                return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(d{3})(?=d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
            };
        }
    </script>
}
